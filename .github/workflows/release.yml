name: Build Binaries & Release

on:
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      version_name: ${{ steps.get_version.outputs.FTA_VERSION }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v3
      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep '^version =' crates/fta/Cargo.toml | sed 's/^version = "\(.*\)"/\1/')
          echo "Version: $VERSION"
          echo "FTA_VERSION=$VERSION" >> $GITHUB_OUTPUT
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.FTA_VERSION }}
          release_name: Release ${{ steps.get_version.outputs.FTA_VERSION }}
          draft: true
          prerelease: false

  upload-assets-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep '^version =' crates/fta/Cargo.toml | sed 's/^version = "\(.*\)"/\1/')
          echo "Version: $VERSION"
          echo "FTA_VERSION={$VERSION}" >> $GITHUB_OUTPUT

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
          target: x86_64-apple-darwin
          default: true

      - name: Install dependencies
        run: brew install llvm

      - name: Build x86_64-apple-darwin
        run: cargo build --release --target=x86_64-apple-darwin

      - name: Setup Rust for aarch64-apple-darwin
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          default: true

      - name: Build aarch64-apple-darwin
        run: cargo build --release --target=aarch64-apple-darwin

      - name: Create tarballs
        run: |
          tar czvf x86_64-apple-darwin.tar.gz target/x86_64-apple-darwin/release/fta
          tar czvf aarch64-apple-darwin.tar.gz target/aarch64-apple-darwin/release/fta

      - name: Upload macOS x86 tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./x86_64-apple-darwin.tar.gz
          asset_name: fta-${{ needs.create-release.outputs.version_name }}-x86_64-apple-darwin.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS silicon tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./aarch64-apple-darwin.tar.gz
          asset_name: fta-${{ needs.create-release.outputs.version_name }}-aarch64-apple-darwin.tar.gz
          asset_content_type: application/gzip

  # release:
  #   if: github.event_name == 'push'
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Install Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: stable
  #         override: true

  #     - name: Install dependencies for cross-compilation
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y gcc-multilib g++-multilib

  #     - name: Install osxcross dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y --no-install-recommends \
  #           clang \
  #           cmake \
  #           libssl-dev \
  #           pkg-config \
  #           zlib1g-dev

  #     - name: Install cross
  #       run: |
  #         cargo install cross

  #     - name: Build binaries for all targets
  #       run: |
  #         rustup target add x86_64-apple-darwin
  #         rustup target add x86_64-unknown-linux-gnu
  #         rustup target add aarch64-apple-darwin
  #         rustup target add aarch64-unknown-linux-gnu
  #         rustup target add aarch64-unknown-linux-musl
  #         rustup target add armv7-unknown-linux-gnueabihf
  #         rustup target add aarch64-linux-android
  #         rustup target add x86_64-pc-windows-msvc
  #         rustup target add aarch64-pc-windows-msvc
  #         rustup target add wasm32-unknown-unknown
  #         cross build --release --target=x86_64-apple-darwin
  #         cross build --release --target=x86_64-unknown-linux-gnu
  #         cross build --release --target=aarch64-apple-darwin
  #         cross build --release --target=aarch64-unknown-linux-gnu
  #         cross build --release --target=aarch64-unknown-linux-musl
  #         cross build --release --target=armv7-unknown-linux-gnueabihf
  #         cross build --release --target=aarch64-linux-android
  #         cross build --release --target=x86_64-pc-windows-msvc
  #         cross build --release --target=aarch64-pc-windows-msvc
  #         cross build --release --target=wasm32-unknown-unknown

  #     - name: Get version
  #       id: get_version
  #       run: |
  #         VERSION=$(grep '^version =' crates/fta/Cargo.toml | sed 's/^version = "\(.*\)"/\1/')
  #         echo "Version: $VERSION"
  #         echo "FTA_VERSION={$VERSION}" >> $GITHUB_OUTPUT

  #     - name: Upload binaries to release
  #       uses: svenstaro/upload-release-action@v2
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: target/*/*fta*
  #         tag: ${{ steps.get_version.outputs.FTA_VERSION }}
  #         overwrite: true
  #         file_glob: true

  #     - name: Publish to crates.io
  #       env:
  #         CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  #       run: |
  #         cargo publish --token $CARGO_REGISTRY_TOKEN
  #       working-directory: crates/fta
